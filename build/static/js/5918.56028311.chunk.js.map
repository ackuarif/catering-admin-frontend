{"version":3,"file":"static/js/5918.56028311.chunk.js","mappings":"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","sources":["components/Toast.js","views/admin/EditAdmin.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CToast, CToastBody, CToastClose } from '@coreui/react'\n\nconst Toast = ({ color, body }) => {\n  return (\n    <CToast autohide={true} color={color} className=\"text-white align-items-center\" visible={true}>\n      <div className=\"d-flex\">\n        <CToastBody>{body}</CToastBody>\n        <CToastClose className=\"me-2 m-auto\" white />\n      </div>\n    </CToast>\n  )\n}\n\nToast.propTypes = {\n  color: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n}\n\nexport default Toast\n","import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CForm,\n  CFormInput,\n  CFormSelect,\n  CRow,\n  CFormTextarea,\n  CInputGroupText,\n  CInputGroup,\n  CToaster,\n  CSpinner,\n} from '@coreui/react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { getAdminById, updateAdmin } from 'src/utils/api'\nimport Toast from 'src/components/Toast'\n\nconst EditAdmin = () => {\n  const navigate = useNavigate()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [toast, addToast] = useState(0)\n\n  const { id } = useParams()\n  const [nama, setNama] = useState('')\n  const [user_id, setUserId] = useState('')\n  const [password, setPassword] = useState('')\n  const [password_confirm, setPasswordConfirm] = useState('')\n\n  useEffect(() => {\n    componentDidMount()\n  }, [])\n\n  const componentDidMount = async () => {\n    await getAdminByIdFunc()\n  }\n\n  const getAdminByIdFunc = async () => {\n    setIsLoading(true)\n    const getAdminByIdReq = await getAdminById(id)\n    setIsLoading(false)\n\n    if (!getAdminByIdReq.success) {\n      addToast(<Toast color=\"danger\" body={getAdminByIdReq.message} />)\n      navigate('/admin/tambah')\n      return\n    }\n\n    setNama(getAdminByIdReq.data.nama)\n    setUserId(getAdminByIdReq.data.user_id)\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.stopPropagation()\n    }\n\n    setIsLoading(true)\n\n    const updateAdminReq = await updateAdmin({\n      id,\n      nama,\n      user_id,\n    })\n\n    setIsLoading(false)\n\n    if (!updateAdminReq.success) {\n      addToast(<Toast color=\"danger\" body={updateAdminReq.message} />)\n      return\n    }\n    addToast(<Toast color=\"success\" body={updateAdminReq.message} />)\n    navigate('/admin/data')\n  }\n\n  if (isLoading) return <CSpinner color=\"primary\" />\n\n  return (\n    <CRow>\n      <CToaster push={toast} placement=\"top-end\" />\n      <div>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Edit Admin</strong>\n          </CCardHeader>\n          <CCardBody>\n            <CForm className=\"row g-3\" onSubmit={handleSubmit}>\n              <CInputGroup>\n                <CFormInput\n                  size=\"2\"\n                  type=\"text\"\n                  required\n                  placeholder=\"Nama\"\n                  onChange={(e) => {\n                    setNama(e.target.value)\n                  }}\n                  value={nama}\n                />\n              </CInputGroup>\n              <CInputGroup>\n                <CFormInput\n                  size=\"2\"\n                  type=\"text\"\n                  required\n                  placeholder=\"User ID\"\n                  onChange={(e) => {\n                    setUserId(e.target.value)\n                  }}\n                  value={user_id}\n                />\n              </CInputGroup>\n              <CInputGroup>\n                <CButton color=\"primary\" type=\"submit\">\n                  Simpan\n                </CButton>\n              </CInputGroup>\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </div>\n    </CRow>\n  )\n}\n\nexport default EditAdmin\n"],"names":["_ref","color","body","_jsx","CToast","autohide","className","visible","children","_jsxs","CToastBody","CToastClose","white","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","toast","addToast","id","useParams","_useState5","_useState6","nama","setNama","_useState7","_useState8","user_id","setUserId","_useState9","_useState10","_useState11","_useState12","useEffect","componentDidMount","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getAdminByIdFunc","stop","apply","arguments","_ref2","_callee2","getAdminByIdReq","_context2","getAdminById","sent","success","Toast","message","abrupt","data","handleSubmit","_ref3","_callee3","event","updateAdminReq","_context3","preventDefault","currentTarget","checkValidity","stopPropagation","updateAdmin","_x","CSpinner","CRow","CToaster","push","placement","CCard","CCardHeader","CCardBody","CForm","onSubmit","CInputGroup","CFormInput","size","type","required","placeholder","onChange","e","target","value","CButton"],"sourceRoot":""}