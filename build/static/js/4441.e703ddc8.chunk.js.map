{"version":3,"file":"static/js/4441.e703ddc8.chunk.js","mappings":"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","sources":["components/Toast.js","views/menu/DataMenu.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CToast, CToastBody, CToastClose } from '@coreui/react'\n\nconst Toast = ({ color, body }) => {\n  return (\n    <CToast autohide={true} color={color} className=\"text-white align-items-center\" visible={true}>\n      <div className=\"d-flex\">\n        <CToastBody>{body}</CToastBody>\n        <CToastClose className=\"me-2 m-auto\" white />\n      </div>\n    </CToast>\n  )\n}\n\nToast.propTypes = {\n  color: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n}\n\nexport default Toast\n","import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CForm,\n  CFormInput,\n  CFormSelect,\n  CRow,\n  CFormTextarea,\n  CInputGroupText,\n  CInputGroup,\n  CToaster,\n  CSpinner,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n} from '@coreui/react'\nimport { useNavigate } from 'react-router-dom'\nimport { addMenu, deleteMenuById, deleteMneuById, getMenuAll } from 'src/utils/api'\nimport Toast from 'src/components/Toast'\n\nconst DataMenu = () => {\n  const navigate = useNavigate()\n\n  const [isLoading, setIsLoading] = useState(false)\n  const [toast, addToast] = useState(0)\n\n  const [menus, setMenus] = useState([])\n\n  useEffect(() => {\n    componentDidMount()\n  }, [])\n\n  const getMenuAllReqFunc = async () => {\n    setIsLoading(true)\n    const getMenuAllReq = await getMenuAll()\n    setIsLoading(false)\n    setMenus(getMenuAllReq)\n  }\n\n  const componentDidMount = async () => {\n    await getMenuAllReqFunc()\n  }\n\n  const deleteMenuByIdFunc = async (id) => {\n    setIsLoading(true)\n    const deleteMenuByIdReq = await deleteMenuById(id)\n    setIsLoading(false)\n\n    if (!deleteMenuByIdReq.success) {\n      addToast(<Toast color=\"danger\" body={deleteMenuByIdReq.message} />)\n      return\n    }\n\n    await getMenuAllReqFunc()\n  }\n\n  const MenuTable = () => {\n    const [visible, setVisible] = useState(false)\n    const [menuId, setMenuId] = useState('')\n\n    return (\n      <>\n        <CTable striped hover>\n          <CTableHead>\n            <CTableRow>\n              <CTableHeaderCell scope=\"col\">No.</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Menu</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Deskripsi</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Harga</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Diskon</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Gambar</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Aksi</CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {menus.data.map((menu, i) => {\n              const { id, nama, detail, harga, diskon, gambar } = menu\n              return (\n                <CTableRow key={id}>\n                  <CTableHeaderCell scope=\"row\">{i + 1}</CTableHeaderCell>\n                  <CTableDataCell>{nama}</CTableDataCell>\n                  <CTableDataCell>{detail}</CTableDataCell>\n                  <CTableDataCell>Rp.{harga}</CTableDataCell>\n                  <CTableDataCell>{diskon}%</CTableDataCell>\n                  <CTableDataCell>\n                    <img src={gambar} width=\"70\" />\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <CButton\n                      onClick={() => {\n                        navigate(`/menu/edit/${id}`)\n                      }}\n                      className=\"mb-1 ms-1\"\n                      color=\"primary\"\n                      size=\"sm\"\n                    >\n                      Edit\n                    </CButton>\n                    <CButton\n                      className=\"mb-1 ms-1\"\n                      color=\"danger\"\n                      onClick={() => {\n                        setVisible(!visible)\n                        setMenuId(id)\n                      }}\n                      size=\"sm\"\n                    >\n                      Hapus\n                    </CButton>\n                  </CTableDataCell>\n                </CTableRow>\n              )\n            })}\n          </CTableBody>\n        </CTable>\n        <CModal alignment=\"center\" visible={visible} onClose={() => setVisible(false)}>\n          <CModalHeader>\n            <CModalTitle>Hapus</CModalTitle>\n          </CModalHeader>\n          <CModalBody>Apakah yakin akan menghapus data tersebut ?</CModalBody>\n          <CModalFooter>\n            <CButton color=\"secondary\" onClick={() => setVisible(false)}>\n              Batal\n            </CButton>\n            <CButton color=\"danger\" onClick={() => deleteMenuByIdFunc(menuId)}>\n              Hapus\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </>\n    )\n  }\n\n  if (isLoading) return <CSpinner color=\"primary\" />\n\n  return (\n    <CRow>\n      <div>\n        <CToaster push={toast} placement=\"top-end\" />\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Data Menu</strong>\n          </CCardHeader>\n          <CCardBody>{menus.success ? <MenuTable /> : menus.message}</CCardBody>\n        </CCard>\n      </div>\n    </CRow>\n  )\n}\n\nexport default DataMenu\n"],"names":["_ref","color","body","_jsx","CToast","autohide","className","visible","children","_jsxs","CToastBody","CToastClose","white","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","toast","addToast","_useState5","_useState6","menus","setMenus","useEffect","componentDidMount","getMenuAllReqFunc","_asyncToGenerator","_regeneratorRuntime","mark","_callee","getMenuAllReq","wrap","_context","prev","next","getMenuAll","sent","stop","apply","arguments","_ref2","_callee2","_context2","deleteMenuByIdFunc","_ref3","_callee3","id","deleteMenuByIdReq","_context3","deleteMenuById","success","Toast","message","abrupt","_x","MenuTable","_useState7","_useState8","setVisible","_useState9","_useState10","menuId","setMenuId","_Fragment","CTable","striped","hover","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","data","map","menu","i","nama","detail","harga","diskon","gambar","CTableDataCell","src","width","CButton","onClick","concat","size","CModal","alignment","onClose","CModalHeader","CModalTitle","CModalBody","CModalFooter","CSpinner","CRow","CToaster","push","placement","CCard","CCardHeader","CCardBody"],"sourceRoot":""}